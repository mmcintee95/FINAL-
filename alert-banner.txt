import React, { useState, useEffect, useRef } from 'react';

const AlertBanner = ({ notifications = [] }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isPaused, setIsPaused] = useState(false);
  const bannerRef = useRef(null);
  
  // Default notifications if none are provided
  const defaultNotifications = [
    { id: 1, message: "Dining Hall closes early today at 6:00 PM.", type: "info" },
    { id: 2, message: "Library extended hours during finals week.", type: "info" },
    { id: 3, message: "Campus shuttle service modified this weekend.", type: "info" }
  ];
  
  const allNotifications = notifications.length > 0 ? notifications : defaultNotifications;
  
  // Auto-scroll notifications every 5 seconds
  useEffect(() => {
    if (allNotifications.length <= 1 || isPaused) return;
    
    const interval = setInterval(() => {
      setCurrentIndex(prevIndex => (prevIndex + 1) % allNotifications.length);
    }, 5000);
    
    return () => clearInterval(interval);
  }, [allNotifications.length, isPaused]);
  
  // Get notification type styling
  const getNotificationStyle = (type = 'info') => {
    switch (type) {
      case 'warning':
        return 'bg-yellow-800 text-yellow-200';
      case 'error':
        return 'bg-red-800 text-red-200';
      case 'success':
        return 'bg-green-800 text-green-200';
      case 'info':
      default:
        return 'bg-blue-800 text-blue-200';
    }
  };
  
  // Handle next notification
  const handleNext = () => {
    setCurrentIndex(prevIndex => (prevIndex + 1) % allNotifications.length);
  };
  
  // Handle previous notification
  const handlePrev = () => {
    setCurrentIndex(prevIndex => (prevIndex - 1 + allNotifications.length) % allNotifications.length);
  };
  
  // Toggle pause state
  const togglePause = () => {
    setIsPaused(prev => !prev);
  };
  
  if (allNotifications.length === 0) {
    return null;
  }
  
  const currentNotification = allNotifications[currentIndex];
  
  return (
    <div 
      ref={bannerRef}
      className="py-2 px-4 text-white flex items-center justify-between"
      onMouseEnter={() => setIsPaused(true)}
      onMouseLeave={() => setIsPaused(false)}
    >
      <button 
        onClick={handlePrev} 
        className="text-gray-400 hover:text-white p-1"
        aria-label="Previous notification"
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
        </svg>
      </button>
      
      <div className="flex-1 mx-2 overflow-hidden">
        <div 
          className={`transition-all duration-500 transform ${getNotificationStyle(currentNotification.type)} px-3 py-1 rounded text-center`}
        >
          {currentNotification.message}
        </div>
      </div>
      
      <div className="flex items-center">
        <button 
          onClick={togglePause} 
          className="text-gray-400 hover:text-white p-1 mr-1"
          aria-label={isPaused ? "Resume notifications" : "Pause notifications"}
        >
          {isPaused ? (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
            </svg>
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a
